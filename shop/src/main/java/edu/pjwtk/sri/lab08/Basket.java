/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pjwtk.sri.lab08;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-15")
public class Basket implements org.apache.thrift.TBase<Basket, Basket._Fields>, java.io.Serializable, Cloneable, Comparable<Basket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Basket");

  private static final org.apache.thrift.protocol.TField ORDER_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("order_items", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BasketStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BasketTupleSchemeFactory();

  public java.util.Set<OrderItem> order_items; // required
  public int client_id; // required
  public int id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ITEMS((short)1, "order_items"),
    CLIENT_ID((short)2, "client_id"),
    ID((short)3, "id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ITEMS
          return ORDER_ITEMS;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLIENT_ID_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("order_items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderItem.class))));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Basket.class, metaDataMap);
  }

  public Basket() {
  }

  public Basket(
    java.util.Set<OrderItem> order_items,
    int client_id,
    int id)
  {
    this();
    this.order_items = order_items;
    this.client_id = client_id;
    setClient_idIsSet(true);
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Basket(Basket other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrder_items()) {
      java.util.Set<OrderItem> __this__order_items = new java.util.HashSet<OrderItem>(other.order_items.size());
      for (OrderItem other_element : other.order_items) {
        __this__order_items.add(new OrderItem(other_element));
      }
      this.order_items = __this__order_items;
    }
    this.client_id = other.client_id;
    this.id = other.id;
  }

  public Basket deepCopy() {
    return new Basket(this);
  }

  @Override
  public void clear() {
    this.order_items = null;
    setClient_idIsSet(false);
    this.client_id = 0;
    setIdIsSet(false);
    this.id = 0;
  }

  public int getOrder_itemsSize() {
    return (this.order_items == null) ? 0 : this.order_items.size();
  }

  public java.util.Iterator<OrderItem> getOrder_itemsIterator() {
    return (this.order_items == null) ? null : this.order_items.iterator();
  }

  public void addToOrder_items(OrderItem elem) {
    if (this.order_items == null) {
      this.order_items = new java.util.HashSet<OrderItem>();
    }
    this.order_items.add(elem);
  }

  public java.util.Set<OrderItem> getOrder_items() {
    return this.order_items;
  }

  public Basket setOrder_items(java.util.Set<OrderItem> order_items) {
    this.order_items = order_items;
    return this;
  }

  public void unsetOrder_items() {
    this.order_items = null;
  }

  /** Returns true if field order_items is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_items() {
    return this.order_items != null;
  }

  public void setOrder_itemsIsSet(boolean value) {
    if (!value) {
      this.order_items = null;
    }
  }

  public int getClient_id() {
    return this.client_id;
  }

  public Basket setClient_id(int client_id) {
    this.client_id = client_id;
    setClient_idIsSet(true);
    return this;
  }

  public void unsetClient_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENT_ID_ISSET_ID);
  }

  /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENT_ID_ISSET_ID);
  }

  public void setClient_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENT_ID_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public Basket setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORDER_ITEMS:
      if (value == null) {
        unsetOrder_items();
      } else {
        setOrder_items((java.util.Set<OrderItem>)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClient_id();
      } else {
        setClient_id((java.lang.Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ITEMS:
      return getOrder_items();

    case CLIENT_ID:
      return getClient_id();

    case ID:
      return getId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ITEMS:
      return isSetOrder_items();
    case CLIENT_ID:
      return isSetClient_id();
    case ID:
      return isSetId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Basket)
      return this.equals((Basket)that);
    return false;
  }

  public boolean equals(Basket that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_order_items = true && this.isSetOrder_items();
    boolean that_present_order_items = true && that.isSetOrder_items();
    if (this_present_order_items || that_present_order_items) {
      if (!(this_present_order_items && that_present_order_items))
        return false;
      if (!this.order_items.equals(that.order_items))
        return false;
    }

    boolean this_present_client_id = true;
    boolean that_present_client_id = true;
    if (this_present_client_id || that_present_client_id) {
      if (!(this_present_client_id && that_present_client_id))
        return false;
      if (this.client_id != that.client_id)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrder_items()) ? 131071 : 524287);
    if (isSetOrder_items())
      hashCode = hashCode * 8191 + order_items.hashCode();

    hashCode = hashCode * 8191 + client_id;

    hashCode = hashCode * 8191 + id;

    return hashCode;
  }

  @Override
  public int compareTo(Basket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrder_items()).compareTo(other.isSetOrder_items());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_items()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_items, other.order_items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClient_id()).compareTo(other.isSetClient_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Basket(");
    boolean first = true;

    sb.append("order_items:");
    if (this.order_items == null) {
      sb.append("null");
    } else {
      sb.append(this.order_items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("client_id:");
    sb.append(this.client_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'client_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BasketStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BasketStandardScheme getScheme() {
      return new BasketStandardScheme();
    }
  }

  private static class BasketStandardScheme extends org.apache.thrift.scheme.StandardScheme<Basket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Basket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.order_items = new java.util.HashSet<OrderItem>(2*_set0.size);
                OrderItem _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new OrderItem();
                  _elem1.read(iprot);
                  struct.order_items.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setOrder_itemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.client_id = iprot.readI32();
              struct.setClient_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClient_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'client_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Basket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.order_items != null) {
        oprot.writeFieldBegin(ORDER_ITEMS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.order_items.size()));
          for (OrderItem _iter3 : struct.order_items)
          {
            _iter3.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
      oprot.writeI32(struct.client_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BasketTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BasketTupleScheme getScheme() {
      return new BasketTupleScheme();
    }
  }

  private static class BasketTupleScheme extends org.apache.thrift.scheme.TupleScheme<Basket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Basket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.client_id);
      oprot.writeI32(struct.id);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrder_items()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOrder_items()) {
        {
          oprot.writeI32(struct.order_items.size());
          for (OrderItem _iter4 : struct.order_items)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Basket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.client_id = iprot.readI32();
      struct.setClient_idIsSet(true);
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.order_items = new java.util.HashSet<OrderItem>(2*_set5.size);
          OrderItem _elem6;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = new OrderItem();
            _elem6.read(iprot);
            struct.order_items.add(_elem6);
          }
        }
        struct.setOrder_itemsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

